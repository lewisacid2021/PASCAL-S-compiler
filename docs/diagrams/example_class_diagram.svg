<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="968px" preserveAspectRatio="none" style="width:1398px;height:968px;" version="1.1" viewBox="0 0 1398 968" width="1398px" zoomAndPan="magnify"><defs><filter height="300%" id="fhi9yj5qvjiy2" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[208a56047cdd396b1bf222d59215d923]
class C_0001606454869580324163--><rect fill="#FEFECE" filter="url(#fhi9yj5qvjiy2)" height="388.9219" id="C_0001606454869580324163" style="stroke: #A80036; stroke-width: 1.5;" width="837" x="6" y="218"/><ellipse cx="381.25" cy="234" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M384.2188,239.6406 Q383.6406,239.9375 383,240.0781 Q382.3594,240.2344 381.6563,240.2344 Q379.1563,240.2344 377.8281,238.5938 Q376.5156,236.9375 376.5156,233.8125 Q376.5156,230.6875 377.8281,229.0313 Q379.1563,227.375 381.6563,227.375 Q382.3594,227.375 383,227.5313 Q383.6563,227.6875 384.2188,227.9844 L384.2188,230.7031 Q383.5938,230.125 383,229.8594 Q382.4063,229.5781 381.7813,229.5781 Q380.4375,229.5781 379.75,230.6563 Q379.0625,231.7188 379.0625,233.8125 Q379.0625,235.9063 379.75,236.9844 Q380.4375,238.0469 381.7813,238.0469 Q382.4063,238.0469 383,237.7813 Q383.5938,237.5 384.2188,236.9219 L384.2188,239.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="78" x="401.75" y="238.1543">TableRecord</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="842" y1="250" y2="250"/><ellipse cx="17" cy="261" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="26" y="264.2104">TableRecord() : void</text><ellipse cx="17" cy="273.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="26" y="277.0151">~TableRecord() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="7" x2="842" y1="283.6094" y2="283.6094"/><ellipse cx="17" cy="294.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="26" y="297.8198">checkArrayXthIndexRange(int X, int index) : bool</text><ellipse cx="17" cy="307.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="26" y="310.6245">findXthFormalParaType(int X) : std::string</text><ellipse cx="17" cy="320.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="26" y="323.4292">isXthFormalParaRefered(int X) : bool</text><ellipse cx="17" cy="333.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="808" x="26" y="336.2339">setArray(std::string id_para, int rowNumber_para, std::string type_para, int amount_para, std::vector&lt;pair&lt;int,int&gt;&gt; arrayRange_para) : void</text><ellipse cx="17" cy="345.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="694" x="26" y="349.0386">setConst(std::string id_para, int rowNumber_para, std::string type_para, bool isMinus_para, std::string value_para) : void</text><ellipse cx="17" cy="358.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="786" x="26" y="361.8433">setFunction(std::string id_para, int rowNumber_para, std::string type_para, int amount_para, SymbolTable * subSymbolTable_para) : void</text><ellipse cx="17" cy="371.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="443" x="26" y="374.6479">setPara(std::string id_para, int rowNumber_para, std::string type_para) : void</text><ellipse cx="17" cy="384.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="670" x="26" y="387.4526">setProcedure(std::string id_para, int rowNumber_para, int amount_para, SymbolTable * subSymbolTable_para) : void</text><ellipse cx="17" cy="397.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="811" x="26" y="400.2573">setProgramName(std::string id_para, int rowNumber_para, std::string programInfo_para, int amount_para, std::string returnType_para) : void</text><ellipse cx="17" cy="409.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="691" x="26" y="413.062">setRecord(std::string id_para, std::string recordName, int rowNumber_para, SymbolTable * subSymbolTable_para) : void</text><ellipse cx="17" cy="422.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="552" x="26" y="425.8667">setString(std::string id_para, int rowNumber_para, std::string type_para, int amount_para) : void</text><ellipse cx="17" cy="435.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="436" x="26" y="438.6714">setVar(std::string id_para, int rowNumber_para, std::string type_para) : void</text><ellipse cx="17" cy="448.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="462" x="26" y="451.4761">setVarPara(std::string id_para, int rowNumber_para, std::string type_para) : void</text><ellipse cx="17" cy="461.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="26" y="464.2808">setVoidPara(std::string id_para, int rowNumber_para) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="842" y1="470.875" y2="470.875"/><ellipse cx="17" cy="481.875" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="26" y="485.0854">amount : int</text><ellipse cx="17" cy="494.6797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="26" y="497.8901">arrayRange : vector&lt;pair&lt;int,int&gt;&gt;</text><ellipse cx="17" cy="507.4844" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="26" y="510.6948">flag : std::string</text><ellipse cx="17" cy="520.2891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="26" y="523.4995">id : std::string</text><ellipse cx="17" cy="533.0938" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="26" y="536.3042">isMinus : bool</text><ellipse cx="17" cy="545.8984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="26" y="549.1089">programInfo : std::string</text><ellipse cx="17" cy="558.7031" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="26" y="561.9136">rowNumber : int</text><ellipse cx="17" cy="571.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="26" y="574.7183">subSymbolTable : SymbolTable *</text><ellipse cx="17" cy="584.3125" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="26" y="587.5229">type : std::string</text><ellipse cx="17" cy="597.1172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="26" y="600.3276">value : std::string</text><!--MD5=[8622cc25b1566280c911a77f099e10ac]
class C_0000522733582439809359--><rect fill="#FEFECE" filter="url(#fhi9yj5qvjiy2)" height="273.6797" id="C_0000522733582439809359" style="stroke: #A80036; stroke-width: 1.5;" width="680" x="485.5" y="684"/><ellipse cx="782.25" cy="700" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M785.2188,705.6406 Q784.6406,705.9375 784,706.0781 Q783.3594,706.2344 782.6563,706.2344 Q780.1563,706.2344 778.8281,704.5938 Q777.5156,702.9375 777.5156,699.8125 Q777.5156,696.6875 778.8281,695.0313 Q780.1563,693.375 782.6563,693.375 Q783.3594,693.375 784,693.5313 Q784.6563,693.6875 785.2188,693.9844 L785.2188,696.7031 Q784.5938,696.125 784,695.8594 Q783.4063,695.5781 782.7813,695.5781 Q781.4375,695.5781 780.75,696.6563 Q780.0625,697.7188 780.0625,699.8125 Q780.0625,701.9063 780.75,702.9844 Q781.4375,704.0469 782.7813,704.0469 Q783.4063,704.0469 784,703.7813 Q784.5938,703.5 785.2188,702.9219 L785.2188,705.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="78" x="802.75" y="704.1543">SymbolTable</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="486.5" x2="1164.5" y1="716" y2="716"/><ellipse cx="496.5" cy="727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="505.5" y="730.2104">SymbolTable(std::string type = "sub") : void</text><ellipse cx="496.5" cy="739.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="505.5" y="743.0151">~SymbolTable() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="486.5" x2="1164.5" y1="749.6094" y2="749.6094"/><ellipse cx="496.5" cy="760.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="651" x="505.5" y="763.8198">addArray(std::string id, int rowNumber, std::string type, int amount, std::vector&lt;pair&lt;int,int&gt;&gt; arrayRange) : void</text><ellipse cx="496.5" cy="773.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="537" x="505.5" y="776.6245">addConst(std::string id, int rowNumber, std::string type, bool isMinus, std::string value) : void</text><ellipse cx="496.5" cy="786.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="629" x="505.5" y="789.4292">addFunction(std::string id, int rowNumber, std::string type, int amount, SymbolTable * subSymbolTable) : void</text><ellipse cx="496.5" cy="799.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="350" x="505.5" y="802.2339">addPara(std::string id, int rowNumber, std::string type) : void</text><ellipse cx="496.5" cy="811.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="545" x="505.5" y="815.0386">addProcedure(std::string id, int rowNumber, int amount, SymbolTable * subSymbolTable) : void</text><ellipse cx="496.5" cy="824.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="654" x="505.5" y="827.8433">addProgramName(std::string id, int rowNumber, std::string programInfo, int amount, std::string returnType) : void</text><ellipse cx="496.5" cy="837.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="598" x="505.5" y="840.6479">addRecord(std::string id, std::string recordName, int rowNumber, SymbolTable * subSymbolTable) : void</text><ellipse cx="496.5" cy="850.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="427" x="505.5" y="853.4526">addString(std::string id, int rowNumber, std::string type, int amount) : void</text><ellipse cx="496.5" cy="863.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="421" x="505.5" y="866.2573">addSubSymbolTable(std::string id, SymbolTable * subSymbolTable) : void</text><ellipse cx="496.5" cy="875.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="505.5" y="879.062">addVar(std::string id, int rowNumber, std::string type) : void</text><ellipse cx="496.5" cy="888.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="369" x="505.5" y="891.8667">addVarPara(std::string id, int rowNumber, std::string type) : void</text><ellipse cx="496.5" cy="901.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="505.5" y="904.6714">addVoidPara(std::string id, int rowNumber) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="486.5" x2="1164.5" y1="911.2656" y2="911.2656"/><ellipse cx="496.5" cy="922.2656" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="505.5" y="925.4761">idLoc : unordered_map&lt;std::string,int&gt;</text><ellipse cx="496.5" cy="935.0703" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="505.5" y="938.2808">records : vector&lt;TableRecord *&gt;</text><ellipse cx="496.5" cy="947.875" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="505.5" y="951.0854">tableType : std::string</text><!--MD5=[ab1fa32acc91db39bc3432482b6dcee1]
class C_0001628368238549969542--><rect fill="#FEFECE" filter="url(#fhi9yj5qvjiy2)" height="132.8281" id="C_0001628368238549969542" style="stroke: #A80036; stroke-width: 1.5;" width="438" x="949.5" y="346"/><ellipse cx="1110.75" cy="362" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1113.7188,367.6406 Q1113.1406,367.9375 1112.5,368.0781 Q1111.8594,368.2344 1111.1563,368.2344 Q1108.6563,368.2344 1107.3281,366.5938 Q1106.0156,364.9375 1106.0156,361.8125 Q1106.0156,358.6875 1107.3281,357.0313 Q1108.6563,355.375 1111.1563,355.375 Q1111.8594,355.375 1112.5,355.5313 Q1113.1563,355.6875 1113.7188,355.9844 L1113.7188,358.7031 Q1113.0938,358.125 1112.5,357.8594 Q1111.9063,357.5781 1111.2813,357.5781 Q1109.9375,357.5781 1109.25,358.6563 Q1108.5625,359.7188 1108.5625,361.8125 Q1108.5625,363.9063 1109.25,364.9844 Q1109.9375,366.0469 1111.2813,366.0469 Q1111.9063,366.0469 1112.5,365.7813 Q1113.0938,365.5 1113.7188,364.9219 L1113.7188,367.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="107" x="1131.25" y="366.1543">TypeTableRecord</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="950.5" x2="1386.5" y1="378" y2="378"/><ellipse cx="960.5" cy="389" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="969.5" y="392.2104">TypeTableRecord() : void</text><ellipse cx="960.5" cy="401.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="969.5" y="405.0151">~TypeTableRecord() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="950.5" x2="1386.5" y1="411.6094" y2="411.6094"/><ellipse cx="960.5" cy="422.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="969.5" y="425.8198">setType(std::string id, bool isCoverd, SymbolTable * RecordTable) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="950.5" x2="1386.5" y1="432.4141" y2="432.4141"/><ellipse cx="960.5" cy="443.4141" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="969.5" y="446.6245">RecordTable : SymbolTable *</text><ellipse cx="960.5" cy="456.2188" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="969.5" y="459.4292">id : std::string</text><ellipse cx="960.5" cy="469.0234" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="969.5" y="472.2339">isCoverd : bool</text><!--MD5=[2403757151e70630013df5ced353e020]
class C_0000744774109044742354--><rect fill="#FEFECE" filter="url(#fhi9yj5qvjiy2)" height="132.8281" id="C_0000744774109044742354" style="stroke: #A80036; stroke-width: 1.5;" width="441" x="705" y="8"/><ellipse cx="889.75" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M892.7188,29.6406 Q892.1406,29.9375 891.5,30.0781 Q890.8594,30.2344 890.1563,30.2344 Q887.6563,30.2344 886.3281,28.5938 Q885.0156,26.9375 885.0156,23.8125 Q885.0156,20.6875 886.3281,19.0313 Q887.6563,17.375 890.1563,17.375 Q890.8594,17.375 891.5,17.5313 Q892.1563,17.6875 892.7188,17.9844 L892.7188,20.7031 Q892.0938,20.125 891.5,19.8594 Q890.9063,19.5781 890.2813,19.5781 Q888.9375,19.5781 888.25,20.6563 Q887.5625,21.7188 887.5625,23.8125 Q887.5625,25.9063 888.25,26.9844 Q888.9375,28.0469 890.2813,28.0469 Q890.9063,28.0469 891.5,27.7813 Q892.0938,27.5 892.7188,26.9219 L892.7188,29.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="63" x="910.25" y="28.1543">TypeTable</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="706" x2="1145" y1="40" y2="40"/><ellipse cx="716" cy="51" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="725" y="54.2104">TypeTable() : void</text><ellipse cx="716" cy="63.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="725" y="67.0151">~TypeTable() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="706" x2="1145" y1="73.6094" y2="73.6094"/><ellipse cx="716" cy="84.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="415" x="725" y="87.8198">addType(std::string id, bool isCoverd, SymbolTable * RecordTable) : void</text><ellipse cx="716" cy="97.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="725" y="100.6245">findID(std::string id) : TypeTableRecord *</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="706" x2="1145" y1="107.2188" y2="107.2188"/><ellipse cx="716" cy="118.2188" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="725" y="121.4292">idLoc : unordered_map&lt;std::string,int&gt;</text><ellipse cx="716" cy="131.0234" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="725" y="134.2339">records : vector&lt;TypeTableRecord *&gt;</text><!--MD5=[ab1951f14c429f0e44d43e519fdebce8]
link C_0001606454869580324163 to C_0000522733582439809359--><path d="M550.6,607 C564.03,623.51 578.07,639.44 592.5,654 C601.37,662.96 610.78,671.77 620.52,680.37 " fill="none" id="C_0001606454869580324163-&gt;C_0000522733582439809359" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="624.41,683.79,620.2876,674.8454,620.6533,680.4904,615.0083,680.8561,624.41,683.79" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="598.5" cy="646.0664" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="105" x="605.5" y="650.0669">subSymbolTable</text><!--MD5=[8065df9c9377bcce03f778f44d8edc7e]
link C_0000522733582439809359 to C_0001606454869580324163--><path d="M751.72,683.98 C740.49,667.47 728.33,651.38 715.5,637 C707.61,628.16 699.34,619.43 690.77,610.83 " fill="none" id="C_0000522733582439809359-&gt;C_0001606454869580324163" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="687.08,607.16,690.6341,616.3452,690.6227,610.6884,696.2795,610.677,687.08,607.16" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="733.5" cy="646.0664" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="48" x="740.5" y="650.0669">records</text><!--MD5=[3c6da2f34d686d7a0ee4298954f85d9c]
link C_0001628368238549969542 to C_0000522733582439809359--><path d="M1113.01,479.26 C1067.37,533.35 1001.1,611.89 943.68,679.94 " fill="none" id="C_0001628368238549969542-&gt;C_0000522733582439809359" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="940.26,683.99,949.1277,679.7048,943.4904,680.1736,943.0215,674.5362,940.26,683.99" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="982.5" cy="646.0664" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="78" x="989.5" y="650.0669">RecordTable</text><!--MD5=[33c2425539f6db90db568950eed4ae53]
link C_0000744774109044742354 to C_0000522733582439809359--><path d="M918.36,141.07 C907.22,241.54 884.49,439.52 860.5,607 C857.18,630.2 853.39,654.79 849.56,678.69 " fill="none" id="C_0000744774109044742354-&gt;C_0000522733582439809359" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="848.74,683.77,854.1303,675.5272,849.5411,678.8346,846.2337,674.2454,848.74,683.77" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[804d69ac51fb0b28f0ba12cdad5412a6]
link C_0000744774109044742354 to C_0001628368238549969542--><path d="M972.93,141.08 C1014.68,198.8 1075.29,282.61 1117.94,341.59 " fill="none" id="C_0000744774109044742354-&gt;C_0001628368238549969542" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1120.98,345.8,1118.9558,336.1614,1118.0536,341.7459,1112.4691,340.8437,1120.98,345.8" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="1010.5" cy="180.0664" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="48" x="1017.5" y="184.0669">records</text><!--MD5=[c81e5972ef4ff6e49235de907561c851]
@startuml
class "TableRecord" as C_0001606454869580324163
class C_0001606454869580324163 {
+TableRecord() : void
+~TableRecord() : void
..
+checkArrayXthIndexRange(int X, int index) : bool
+findXthFormalParaType(int X) : std::string
+isXthFormalParaRefered(int X) : bool
+setArray(std::string id_para, int rowNumber_para, std::string type_para, int amount_para, std::vector<pair<int,int>> arrayRange_para) : void
+setConst(std::string id_para, int rowNumber_para, std::string type_para, bool isMinus_para, std::string value_para) : void
+setFunction(std::string id_para, int rowNumber_para, std::string type_para, int amount_para, SymbolTable * subSymbolTable_para) : void
+setPara(std::string id_para, int rowNumber_para, std::string type_para) : void
+setProcedure(std::string id_para, int rowNumber_para, int amount_para, SymbolTable * subSymbolTable_para) : void
+setProgramName(std::string id_para, int rowNumber_para, std::string programInfo_para, int amount_para, std::string returnType_para) : void
+setRecord(std::string id_para, std::string recordName, int rowNumber_para, SymbolTable * subSymbolTable_para) : void
+setString(std::string id_para, int rowNumber_para, std::string type_para, int amount_para) : void
+setVar(std::string id_para, int rowNumber_para, std::string type_para) : void
+setVarPara(std::string id_para, int rowNumber_para, std::string type_para) : void
+setVoidPara(std::string id_para, int rowNumber_para) : void
__
+amount : int
+arrayRange : vector<pair<int,int>>
+flag : std::string
+id : std::string
+isMinus : bool
+programInfo : std::string
+rowNumber : int
+subSymbolTable : SymbolTable *
+type : std::string
+value : std::string
}
class "SymbolTable" as C_0000522733582439809359
class C_0000522733582439809359 {
+SymbolTable(std::string type = "sub") : void
+~SymbolTable() : void
..
+addArray(std::string id, int rowNumber, std::string type, int amount, std::vector<pair<int,int>> arrayRange) : void
+addConst(std::string id, int rowNumber, std::string type, bool isMinus, std::string value) : void
+addFunction(std::string id, int rowNumber, std::string type, int amount, SymbolTable * subSymbolTable) : void
+addPara(std::string id, int rowNumber, std::string type) : void
+addProcedure(std::string id, int rowNumber, int amount, SymbolTable * subSymbolTable) : void
+addProgramName(std::string id, int rowNumber, std::string programInfo, int amount, std::string returnType) : void
+addRecord(std::string id, std::string recordName, int rowNumber, SymbolTable * subSymbolTable) : void
+addString(std::string id, int rowNumber, std::string type, int amount) : void
+addSubSymbolTable(std::string id, SymbolTable * subSymbolTable) : void
+addVar(std::string id, int rowNumber, std::string type) : void
+addVarPara(std::string id, int rowNumber, std::string type) : void
+addVoidPara(std::string id, int rowNumber) : void
__
+idLoc : unordered_map<std::string,int>
+records : vector<TableRecord *>
+tableType : std::string
}
class "TypeTableRecord" as C_0001628368238549969542
class C_0001628368238549969542 {
+TypeTableRecord() : void
+~TypeTableRecord() : void
..
+setType(std::string id, bool isCoverd, SymbolTable * RecordTable) : void
__
+RecordTable : SymbolTable *
+id : std::string
+isCoverd : bool
}
class "TypeTable" as C_0000744774109044742354
class C_0000744774109044742354 {
+TypeTable() : void
+~TypeTable() : void
..
+addType(std::string id, bool isCoverd, SymbolTable * RecordTable) : void
+findID(std::string id) : TypeTableRecord *
__
+idLoc : unordered_map<std::string,int>
+records : vector<TypeTableRecord *>
}
C_0001606454869580324163 - -> C_0000522733582439809359 : +subSymbolTable
C_0000522733582439809359 - -> C_0001606454869580324163 : +records
C_0001628368238549969542 - -> C_0000522733582439809359 : +RecordTable
C_0000744774109044742354 ..> C_0000522733582439809359
C_0000744774109044742354 - -> C_0001628368238549969542 : +records

@enduml

PlantUML version 1.2020.02(Sun Mar 01 10:22:07 UTC 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.22+7-post-Ubuntu-0ubuntu222.04.1
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>