@startuml
left to right direction
class "TableRecord" as C_0001606454869580324163
class C_0001606454869580324163 {
+TableRecord() : void
+~TableRecord() : void
..
+setArray(std::string id_para, int rowNumber_para, std::string type_para, int amount_para, std::vector<pair<int,int>> arrayRange_para) : void
+setConst(std::string id_para, int rowNumber_para, std::string type_para, bool isMinus_para, std::string value_para) : void
+setFunction(std::string id_para, int rowNumber_para, std::string type_para, int amount_para, SymbolTable * subSymbolTable_para) : void
+setPara(std::string id_para, int rowNumber_para, std::string type_para) : void
+setProcedure(std::string id_para, int rowNumber_para, int amount_para, SymbolTable * subSymbolTable_para) : void
+setProgramName(std::string id_para, int rowNumber_para, std::string programInfo_para, int amount_para, std::string returnType_para) : void
+setRecord(std::string id_para, std::string recordName, int rowNumber_para, SymbolTable * subSymbolTable_para) : void
+setString(std::string id_para, int rowNumber_para, std::string type_para, int amount_para) : void
+setVar(std::string id_para, int rowNumber_para, std::string type_para) : void
+setVarPara(std::string id_para, int rowNumber_para, std::string type_para) : void
+setVoidPara(std::string id_para, int rowNumber_para) : void
__
+amount : int
+arrayRange : vector<pair<int,int>>
+flag : std::string
+id : std::string
+isMinus : bool
+programInfo : std::string
+rowNumber : int
+subSymbolTable : SymbolTable *
+type : std::string
+value : std::string
}
class "SymbolTable" as C_0000522733582439809359
class C_0000522733582439809359 {
+SymbolTable(std::string type = "sub") : void
+~SymbolTable() : void
..
+addArray(std::string id, int rowNumber, std::string type, int amount, std::vector<pair<int,int>> arrayRange) : void
+addConst(std::string id, int rowNumber, std::string type, bool isMinus, std::string value) : void
+addFunction(std::string id, int rowNumber, std::string type, int amount, SymbolTable * subSymbolTable) : void
+addPara(std::string id, int rowNumber, std::string type) : void
+addProcedure(std::string id, int rowNumber, int amount, SymbolTable * subSymbolTable) : void
+addProgramName(std::string id, int rowNumber, std::string programInfo, int amount, std::string returnType) : void
+addRecord(std::string id, std::string recordName, int rowNumber, SymbolTable * subSymbolTable) : void
+addString(std::string id, int rowNumber, std::string type, int amount) : void
+addVar(std::string id, int rowNumber, std::string type) : void
+addVarPara(std::string id, int rowNumber, std::string type) : void
+addVoidPara(std::string id, int rowNumber) : void
__
+idLoc : unordered_map<std::string,int>
+records : vector<TableRecord *>
+tableType : std::string
}
class "TypeTableRecord" as C_0001628368238549969542
class C_0001628368238549969542 {
+TypeTableRecord() : void
+~TypeTableRecord() : void
..
+setType(std::string id, bool isCoverd, SymbolTable * RecordTable) : void
__
+RecordTable : SymbolTable *
+id : std::string
+isCoverd : bool
}
class "TypeTable" as C_0000744774109044742354
class C_0000744774109044742354 {
+TypeTable() : void
+~TypeTable() : void
..
+addType(std::string id, bool isCoverd, SymbolTable * RecordTable) : void
+findID(std::string id) : TypeTableRecord *
__
+idLoc : unordered_map<std::string,int>
+records : vector<TypeTableRecord *>
}
class "BaseType" as C_0000467689350659102699
class C_0000467689350659102699 {
+BaseType() : void
+BaseType(BaseType::TYPE tt) : void
+~BaseType() : void
..
+DynamicCast<T>() : T *
+GetType() : BaseType::TYPE
__
#template_type : BaseType::TYPE
}
enum "BaseType::TYPE" as C_0000529730883475053920
enum C_0000529730883475053920 {
BASIC
RECORD
ARRAY
STRING
}
class "BasicType" as C_0002185627330333745417
class C_0002185627330333745417 {
+BasicType() : void
+BasicType(BasicType::BASIC_TYPE basic_type) : void
+~BasicType() : void
..
+type() : BasicType::BASIC_TYPE
__
-basic_type : BasicType::BASIC_TYPE
}
enum "BasicType::BASIC_TYPE" as C_0001231730714740378156
enum C_0001231730714740378156 {
INTEGER
REAL
BOOLEAN
CHAR
NONE
}
class "ArrayType" as C_0001959462666872035640
class C_0001959462666872035640 {
+ArrayType() : void
+ArrayType(BaseType * type) : void
+ArrayType(const ArrayType & a) : void
+~ArrayType() : void
..
+GetBasetype() : BaseType *
+GetDimension(size_t i) : ArrayType::Dimension
+GetDimensions() : std::vector<Dimension>
+GetDimsum() : size_t
+SetDimension(std::vector<Dimension> dim) : void
__
-base_type : BaseType *
-dimensions : std::vector<Dimension>
}
class "ArrayType::Dimension" as C_0001209370767085130609
class C_0001209370767085130609 {
+Dimension(int low = 0, int up = 0) : void
__
+lowbound : int
+upbound : int
}
class "StringType" as C_0000587759221513231755
class C_0000587759221513231755 {
+StringType(StringType::GrammarType gt, int len) : void
..
+GetGrammarType() : StringType::GrammarType
+GetLen() : int
__
-grammar_type : StringType::GrammarType
-length : int
}
enum "StringType::GrammarType" as C_0002009989105775456144
enum C_0002009989105775456144 {
LIMIT
NOLIMIT
}
class "RecordType" as C_0002120818701774332934
class C_0002120818701774332934 {
+RecordType() : void
+RecordType(std::unordered_map<std::string,BaseType *> types_map) : void
+~RecordType() : void
..
+Find(std::string name) : BaseType *
+Visit(std::vector<std::string> names) : BaseType *
+add(std::string name, BaseType * type) : bool
__
-types_map_ : std::unordered_map<std::string,BaseType *>
}
class "ConstValue" as C_0000277815500992219614
class C_0000277815500992219614 {
+ConstValue() : void
+ConstValue(const ConstValue & cv) : void
+ConstValue(bool v) : void
+ConstValue(char v) : void
+ConstValue(int v) : void
+ConstValue(std::string & v) : void
+~ConstValue() : void
..
+operator=(const ConstValue & cv) : ConstValue &
..
+get<T>() : T
+get_uminus() : bool
+isValidFloat(const std::string & str) : bool
+set_bool(bool v) : void
+set_char(char v) : void
+set_float(std::string v) : void
+set_int(int v) : void
+set_string(std::string v) : void
+set_uminus() : void
+type() : ConstValue::ConstvalueType
__
- : ConstValue::(anonymous_1696859)
-C_STRING : std::string
-Is_Uminus : bool
-value_type : ConstValue::ConstvalueType
}
enum "ConstValue::ConstvalueType" as C_0001345563472538168523
enum C_0001345563472538168523 {
INTEGER
REAL
BOOLEAN
CHAR
STRING
}
class "ConstValue::()" as C_0001472540614063561858
class C_0001472540614063561858 {
__
+C_BOOLEAN : bool
+C_CHAR : char
+C_INT : int
}
class "ast::AstNode" as C_0000853086690362823776
class C_0000853086690362823776 {
+AstNode() : void
+~AstNode() : void
..
+DynamicCast<T>() : T *
+accept(ast::Visitor * visitor) : void
+append_child(ast::AstNode * child) : void
+get(int pos) : ast::AstNode *
+getCnodeList() : std::vector<AstNode *> &
+get_rownum() : int
+parent() : ast::AstNode *
+set_parent(ast::AstNode * parent) : void
+set_rownum(int rn) : void
__
#cnode_list : std::vector<AstNode *>
#pnode : ast::AstNode *
#row_num : int
}
class "ast::AST" as C_0001755161922335472054
class C_0001755161922335472054 {
+~AST() : void
..
+accept(ast::Visitor * visitor) : void
+getRoot() : ast::AstNode *
+set_root(ast::AstNode * root) : void
__
-astroot : ast::AstNode *
}
class "ast::LeafNode" as C_0001891718448820606885
class C_0001891718448820606885 {
+LeafNode() : void
+LeafNode(ConstValue val, ast::LeafNode::LeafType lt) : void
..
+accept(ast::Visitor * visitor) : void
+getConstValue() : ConstValue *
+getLeafType() : ast::LeafNode::LeafType
+get_type() : ConstValue::ConstvalueType
+get_value<T>() : T
+id_ref() : const std::string
+set_ref(bool ref) : void
+set_value(ConstValue value) : void
__
-is_ref : bool
-leaf_type : ast::LeafNode::LeafType
-value_ : ConstValue
}
enum "ast::LeafNode::LeafType" as C_0001169877962769338550
enum C_0001169877962769338550 {
VALUE
NAME
}
class "ast::ProgramStruct" as C_0001403028613482180792
class C_0001403028613482180792 {
__
}
class "ast::ProgramHead" as C_0001039261186312901148
class C_0001039261186312901148 {
+accept(ast::Visitor * visitor) : void
__
}
class "ast::ProgramBody" as C_0001290645563821860957
class C_0001290645563821860957 {
+accept(ast::Visitor * visitor) : void
__
}
class "ast::IdList" as C_0000098405554555039683
class C_0000098405554555039683 {
+IdList(ast::IdList::GrammarType gt) : void
..
+GetGrammarType() : ast::IdList::GrammarType
+Lists() : std::vector<LeafNode *>
+accept(ast::Visitor * visitor) : void
__
-grammar_type_ : ast::IdList::GrammarType
}
enum "ast::IdList::GrammarType" as C_0000706003615359848754
enum C_0000706003615359848754 {
SINGLE_ID
MULTIPLE_ID
}
class "ast::ConstDeclarations" as C_0001987874590769253296
class C_0001987874590769253296 {
+ConstDeclarations(ast::ConstDeclarations::GrammarType gt) : void
..
+GetGrammarType() : ast::ConstDeclarations::GrammarType
__
-grammar_type : ast::ConstDeclarations::GrammarType
}
enum "ast::ConstDeclarations::GrammarType" as C_0001627710199458724827
enum C_0001627710199458724827 {
EPSILON
DECLARATION
}
class "ast::ConstDeclaration" as C_0000221952385668568331
class C_0000221952385668568331 {
+ConstDeclaration(ast::ConstDeclaration::GrammarType gt, ConstValue::ConstvalueType bt) : void
..
+GetGrammarType() : ast::ConstDeclaration::GrammarType
+Lists() : std::vector<tuple<int,string,ConstValue *>>
+accept(ast::Visitor * visitor) : void
+get_value_type() : ConstValue::ConstvalueType
+print_type() : void
__
-grammar_type : ast::ConstDeclaration::GrammarType
-type : ConstValue::ConstvalueType
}
enum "ast::ConstDeclaration::GrammarType" as C_0001742231075481564967
enum C_0001742231075481564967 {
SINGLE_ID
MULTIPLE_ID
}
class "ast::RecordDeclarations" as C_0001060606805983769539
class C_0001060606805983769539 {
+RecordDeclarations(ast::RecordDeclarations::GrammarType gt) : void
..
+GetGrammarType() : ast::RecordDeclarations::GrammarType
__
-grammar_type : ast::RecordDeclarations::GrammarType
}
enum "ast::RecordDeclarations::GrammarType" as C_0000526924719839086577
enum C_0000526924719839086577 {
EPSILON
DECLARATION
}
class "ast::RecordDeclaration" as C_0001992204529206474452
class C_0001992204529206474452 {
+RecordDeclaration(ast::RecordDeclaration::GrammarType gt) : void
..
+GetGrammarType() : ast::RecordDeclaration::GrammarType
+accept(ast::Visitor * visitor) : void
__
-grammar_type : ast::RecordDeclaration::GrammarType
}
enum "ast::RecordDeclaration::GrammarType" as C_0000537716566214296568
enum C_0000537716566214296568 {
SINGLE_DECLARATION
MULTI_DECLARATION
}
class "ast::VarDeclarations" as C_0001646110349630654613
class C_0001646110349630654613 {
+VarDeclarations(ast::VarDeclarations::GrammarType gt) : void
..
+GetType() : ast::VarDeclarations::GrammarType
__
-grammar_type : ast::VarDeclarations::GrammarType
}
enum "ast::VarDeclarations::GrammarType" as C_0002073936205624464460
enum C_0002073936205624464460 {
EPSILON
DECLARATION
}
class "ast::VarDeclaration" as C_0002078631727897486658
class C_0002078631727897486658 {
+VarDeclaration(ast::VarDeclaration::GrammarType gt) : void
..
+GetGrammarType() : ast::VarDeclaration::GrammarType
+Lists() : std::vector<tuple<vector<LeafNode *>,AstNode *>>
+accept(ast::Visitor * visitor) : void
__
-grammar_type : ast::VarDeclaration::GrammarType
}
enum "ast::VarDeclaration::GrammarType" as C_0001435040438578498233
enum C_0001435040438578498233 {
SINGLE_DECL
MULTIPLE_DECL
}
class "ast::TypeNode" as C_0000483287089190027689
class C_0000483287089190027689 {
+TypeNode(ast::TypeNode::VarType vt) : void
+TypeNode(ast::TypeNode::VarType vt, std::string tn) : void
..
+GetVarType() : ast::TypeNode::VarType
+accept(ast::Visitor * visitor) : void
+get_type_name() : std::string
__
-type_name : std::string
-var_type : ast::TypeNode::VarType
}
enum "ast::TypeNode::VarType" as C_0002269578869727028729
enum C_0002269578869727028729 {
ARRAY_TYPE
ID_TYPE
RECORD_TYPE
STRING_TYPE
}
class "ast::ArrayTypeNode" as C_0001997126894964397376
class C_0001997126894964397376 {
+ArrayTypeNode() : void
+ArrayTypeNode(std::string type) : void
..
+info() : ArrayType *
+set_info(ArrayType * at) : void
+set_type(std::string type) : void
+type() : std::string
__
-array_info : ArrayType *
-type_name : std::string
}
class "ast::RecordNode" as C_0002292809248077293337
class C_0002292809248077293337 {
__
}
class "ast::PeriodsNode" as C_0000934375130850854631
class C_0000934375130850854631 {
+PeriodsNode(ast::PeriodsNode::PeriodType pt) : void
..
+accept(ast::Visitor * visitor) : void
+get_dm() : std::vector<ArrayType::Dimension>
+get_type() : ast::PeriodsNode
+set_dm(std::vector<ArrayType::Dimension> low_dm) : void
__
-dm : std::vector<ArrayType::Dimension>
-period_type : ast::PeriodsNode::PeriodType
}
enum "ast::PeriodsNode::PeriodType" as C_0000314399243617261819
enum C_0000314399243617261819 {
SINGLE
MULTI
}
class "ast::PeriodNode" as C_0000377647302344045910
class C_0000377647302344045910 {
+PeriodNode(int low, int up) : void
..
+get_lowb() : int
+get_upb() : int
__
-lowb : int
-upb : int
}
class "ast::StringTypeNode" as C_0001050890952326808511
class C_0001050890952326808511 {
+StringTypeNode() : void
+StringTypeNode(StringType * type) : void
..
+accept(ast::Visitor * visitor) : void
+set_type(StringType * type) : void
+type() : StringType *
__
-string_info : StringType *
}
class "ast::SubprogramDeclarations" as C_0002224500763270754929
class C_0002224500763270754929 {
__
}
class "ast::SubprogramDeclaration" as C_0001412390065081918621
class C_0001412390065081918621 {
-accept(ast::Visitor * visitor) : void
__
}
class "ast::SubprogramBody" as C_0000909506194982526571
class C_0000909506194982526571 {
__
}
class "ast::SubprogramHead" as C_0000180422951222851979
class C_0000180422951222851979 {
+SubprogramHead(ast::SubprogramHead::SubprogramType st) : void
..
+accept(ast::Visitor * visitor) : void
+get_id() : std::string
+get_type() : ast::SubprogramHead::SubprogramType
+set_id(std::string id) : void
__
-subprogram_id : std::string
-subprogram_type : ast::SubprogramHead::SubprogramType
}
enum "ast::SubprogramHead::SubprogramType" as C_0001887246330543974798
enum C_0001887246330543974798 {
PROC
FUNC
}
class "ast::FormalParam" as C_0002226303723276435070
class C_0002226303723276435070 {
__
}
class "ast::ParamList" as C_0001572200999869269559
class C_0001572200999869269559 {
+ParamList(ast::ParamList::ParamType pt) : void
..
+get_type() : ast::ParamList::ParamType
__
-param_type : ast::ParamList::ParamType
}
enum "ast::ParamList::ParamType" as C_0001907021339308063340
enum C_0001907021339308063340 {
VarParam
ValueParam
}
class "ast::ParamLists" as C_0000179980853142767904
class C_0000179980853142767904 {
+ParamLists(ast::ParamLists::GrammarType gt) : void
..
+Lists() : std::vector<ParamList *>
+accept(ast::Visitor * visitor) : void
+get_type() : ast::ParamLists::GrammarType
__
-grammar_type : ast::ParamLists::GrammarType
}
enum "ast::ParamLists::GrammarType" as C_0001798032292521186319
enum C_0001798032292521186319 {
SINGLE_PARAM_LIST
MULTIPLE_PARAM_LIST
}
class "ast::VarParam" as C_0002154733648916226796
class C_0002154733648916226796 {
__
}
class "ast::ValueParam" as C_0001717198223397862655
class C_0001717198223397862655 {
+ValueParam() : void
..
+accept(ast::Visitor * visitor) : void
+is_ref() : bool
+set_ref() : void
__
-isVar : bool
}
class "ast::CompoundStatement" as C_0000794278244136857665
class C_0000794278244136857665 {
+accept(ast::Visitor * visitor) : void
__
}
class "ast::StatementList" as C_0002238353238070085767
class C_0002238353238070085767 {
+accept(ast::Visitor * visitor) : void
__
}
class "ast::Statement" as C_0001334584314240978134
class C_0001334584314240978134 {
+Statement(ast::Statement::StatementType st) : void
..
+accept(ast::Visitor * visitor) : void
+get_type() : ast::Statement::StatementType
__
-statement_type : ast::Statement::StatementType
}
enum "ast::Statement::StatementType" as C_0001791804704116352889
enum C_0001791804704116352889 {
EPSILON
ASSIGN_OP_STATEMENT
PROCEDURE_CALL
COMPOUND_STATEMENT
IF_STATEMENT
LOOP_STATEMENT
}
class "ast::AssignopStatement" as C_0001335198107022880256
class C_0001335198107022880256 {
+AssignopStatement(ast::AssignopStatement::LeftType lt) : void
..
+accept(ast::Visitor * visitor) : void
+get_type() : ast::AssignopStatement::LeftType
+set_type(ast::AssignopStatement::LeftType lt) : void
__
-left_type : ast::AssignopStatement::LeftType
}
enum "ast::AssignopStatement::LeftType" as C_0002089249235439042912
enum C_0002089249235439042912 {
VARIABLE
FUNCID
}
class "ast::ProcedureCall" as C_0000260509290310579536
class C_0000260509290310579536 {
+ProcedureCall(ast::ProcedureCall::ProcedureType pt, std::string id) : void
..
+accept(ast::Visitor * visitor) : void
+get_id() : std::string
+get_type() : ast::ProcedureCall::ProcedureType
__
-procedure_id : std::string
-procedure_type : ast::ProcedureCall::ProcedureType
}
enum "ast::ProcedureCall::ProcedureType" as C_0000145534378423555184
enum C_0000145534378423555184 {
NO_LIST
EXP_LIST
VAR_LIST
}
class "ast::IfStatement" as C_0001010582041702535922
class C_0001010582041702535922 {
+accept(ast::Visitor * visitor) : void
__
}
class "ast::LoopStatement" as C_0002157851917444485651
class C_0002157851917444485651 {
+LoopStatement(ast::LoopStatement::LoopType lt) : void
..
+accept(ast::Visitor * visitor) : void
+get_type() : ast::LoopStatement::LoopType
__
-loop_type : ast::LoopStatement::LoopType
}
enum "ast::LoopStatement::LoopType" as C_0000277724883564452277
enum C_0000277724883564452277 {
FORUP
FORDOWN
WHILE_
REPEAT_
}
class "ast::ElsePart" as C_0001149455115564085369
class C_0001149455115564085369 {
+ElsePart(ast::ElsePart::ELSEType gt) : void
..
+accept(ast::Visitor * visitor) : void
+get_type() : ast::ElsePart::ELSEType
__
-grammar_type_ : ast::ElsePart::ELSEType
}
enum "ast::ElsePart::ELSEType" as C_0002123844210877963400
enum C_0002123844210877963400 {
EPSILON
ELSE_STATEMENT
}
class "ast::VariableList" as C_0000290295873667969561
class C_0000290295873667969561 {
+VariableList(ast::VariableList::GrammarType gt) : void
..
+FormatString() : std::string
+Lists() : std::vector<ast::AstNode *>
+accept(ast::Visitor * visitor) : void
+get_type() : ast::VariableList::GrammarType
+set_types(std::vector<string> * type_list) : void
__
-grammar_type : ast::VariableList::GrammarType
-variable_type_list : std::vector<std::string> *
}
enum "ast::VariableList::GrammarType" as C_0001686617686631478409
enum C_0001686617686631478409 {
VAR_
VAR_LIST_VAR
}
class "ast::Variable" as C_0001735198267942146977
class C_0001735198267942146977 {
+Variable() : void
+Variable(std::string vn) : void
..
+accept(ast::Visitor * visitor) : void
+get_vn() : std::string
+set_vn(std::string vn) : void
__
-var_type : std::string
}
class "ast::IDVarParts" as C_0000935592460367641586
class C_0000935592460367641586 {
+Lists() : std::vector<ast::AstNode *>
+accept(ast::Visitor * visitor) : void
+get_pointer() : std::vector<std::string> *
+set_pointer(std::vector<std::string> * pn) : void
__
-parts_name : std::vector<std::string> *
}
class "ast::IDVarPart" as C_0001829671956067666425
class C_0001829671956067666425 {
+IDVarPart(ast::IDVarPart::GrammarType gt) : void
..
+accept(ast::Visitor * visitor) : void
+get_part_name() : std::string
+get_type() : ast::IDVarPart::GrammarType
+set_array_lb(int lb) : void
+set_part_name(std::string pn) : void
__
-array_lb_ : int
-grammar_type : ast::IDVarPart::GrammarType
-part_name : std::string
}
enum "ast::IDVarPart::GrammarType" as C_0000676630859667726393
enum C_0000676630859667726393 {
_ID
EXP_LIST
}
class "ast::ExpressionList" as C_0000975878119249737592
class C_0000975878119249737592 {
+ExpressionList(ast::ExpressionList::ExpressionType et, std::vector<std::string> * tl) : void
..
+Lists() : std::vector<AstNode *>
+accept(ast::Visitor * visitor) : void
+get_type() : ast::ExpressionList::ExpressionType
+get_types() : std::vector<std::string> *
__
-exp_type : std::vector<std::string> *
-expression_type : ast::ExpressionList::ExpressionType
}
enum "ast::ExpressionList::ExpressionType" as C_0001766773012925556646
enum C_0001766773012925556646 {
SINGLE
MULTIPLE
}
class "ast::Expression" as C_0000065058684392495055
class C_0000065058684392495055 {
+Expression(ast::Expression::GrammarType gt, std::string st, std::string et) : void
..
+GetExpType() : std::string
+GetGraType() : ast::Expression::GrammarType
+GetSymType() : std::string
+SetExpType(std::string et) : void
+accept(ast::Visitor * visitor) : void
__
-expression_type : std::string
-grammar_type : ast::Expression::GrammarType
-symbol_type : std::string
}
enum "ast::Expression::GrammarType" as C_0000161010635408081536
enum C_0000161010635408081536 {
SINGLE
DOUBLE
}
class "ast::SimpleExpression" as C_0000427656451535093468
class C_0000427656451535093468 {
+SimpleExpression(ast::SimpleExpression::SymbolType st, std::string et) : void
..
+GetExpType() : std::string
+GetSymType() : ast::SimpleExpression::SymbolType
+SetExpType(std::string et) : void
+accept(ast::Visitor * visitor) : void
__
-expression_type : std::string
-symbol_type : ast::SimpleExpression::SymbolType
}
enum "ast::SimpleExpression::SymbolType" as C_0000423987124306390059
enum C_0000423987124306390059 {
PLUS_
MINUS_
OR_
SINGLE
}
class "ast::Term" as C_0001704243835344327889
class C_0001704243835344327889 {
+Term(ast::Term::SymbolType st, std::string et) : void
+Term() : void
..
+GetSymType() : ast::Term::SymbolType
+GetTerType() : std::string
+SetSymType(ast::Term::SymbolType st) : void
+SetTerType(std::string tt) : void
+accept(ast::Visitor * visitor) : void
__
-symbol_type : ast::Term::SymbolType
-term_type : std::string
}
enum "ast::Term::SymbolType" as C_0002260302037909013016
enum C_0002260302037909013016 {
MULTIPLY
DEVIDE
MOD
AND
SINGLE
}
class "ast::Factor" as C_0002284675763545756674
class C_0002284675763545756674 {
+Factor(ast::Factor::GrammerType gt) : void
..
+GetFacType() : std::string
+GetNot() : bool
+SetFacType(std::string ft) : void
+SetUminus() : void
+accept(ast::Visitor * visitor) : void
+get_type() : ast::Factor::GrammerType
__
-factor_type : std::string
-grammer_type : ast::Factor::GrammerType
-is_uminus : bool
}
enum "ast::Factor::GrammerType" as C_0001310165613489391021
enum C_0001310165613489391021 {
NUM
VARIABLE
EXP
ID_EXP_LIST
NOT_
UMINUS_
UPLUS
CHAR_
STR
BOOL
}
abstract "ast::Visitor" as C_0001283217098970852251
abstract C_0001283217098970852251 {
{abstract} +visit(ast::IDVarParts * idVarParts) = 0 : void
{abstract} +visit(ast::IfStatement * ifStatement) = 0 : void
{abstract} +visit(ast::ElsePart * elseNode) = 0 : void
{abstract} +visit(ast::ProcedureCall * procedureCall) = 0 : void
{abstract} +visit(ast::AssignopStatement * assignopStatement) = 0 : void
{abstract} +visit(ast::LoopStatement * loopStatement) = 0 : void
{abstract} +visit(ast::Variable * variable) = 0 : void
{abstract} +visit(ast::VariableList * variableList) = 0 : void
{abstract} +visit(ast::IDVarPart * idVarPart) = 0 : void
{abstract} +visit(ast::StatementList * statementList) = 0 : void
{abstract} +visit(ast::Term * term) = 0 : void
{abstract} +visit(ast::Factor * factor) = 0 : void
{abstract} +visit(ast::Expression * expression) = 0 : void
{abstract} +visit(ast::SimpleExpression * simpleExpression) = 0 : void
{abstract} +visit(ast::Statement * statement) = 0 : void
{abstract} +visit(ast::CompoundStatement * compoundStatement) = 0 : void
{abstract} +visit(ast::ExpressionList * expressionList) = 0 : void
{abstract} +visit(ast::TypeNode * typenode) = 0 : void
{abstract} +visit(ast::AST * AST) = 0 : void
{abstract} +visit(ast::AstNode * astnode) = 0 : void
{abstract} +visit(ast::LeafNode * leafnode) = 0 : void
{abstract} +visit(ast::ProgramHead * programhead) = 0 : void
{abstract} +visit(ast::ProgramBody * programbody) = 0 : void
{abstract} +visit(ast::IdList * idlist) = 0 : void
{abstract} +visit(ast::ConstDeclaration * constdeclaration) = 0 : void
{abstract} +visit(ast::RecordDeclaration * recorddeclaration) = 0 : void
{abstract} +visit(ast::StringTypeNode * stringtypenode) = 0 : void
{abstract} +visit(ast::VarDeclaration * vardeclaration) = 0 : void
{abstract} +visit(ast::PeriodsNode * periodsnode) = 0 : void
{abstract} +visit(ast::SubprogramDeclaration * subprogramdeclaration) = 0 : void
{abstract} +visit(ast::SubprogramHead * subprogramhead) = 0 : void
{abstract} +visit(ast::ParamLists * paramlists) = 0 : void
{abstract} +visit(ast::ValueParam * valueparam) = 0 : void
+visitchild(ast::AstNode * astnode) : void
__
}
class "ast::GenerationVisitor" as C_0002082881558817170019
class C_0002082881558817170019 {
+visit(ast::IDVarParts * idVarParts) : void
+visit(ast::IfStatement * ifStatement) : void
+visit(ast::ElsePart * elseNode) : void
+visit(ast::ProcedureCall * procedureCall) : void
+visit(ast::AssignopStatement * assignopStatement) : void
+visit(ast::LoopStatement * loopStatement) : void
+visit(ast::Variable * variable) : void
+visit(ast::VariableList * variableList) : void
+visit(ast::IDVarPart * idVarPart) : void
+visit(ast::StatementList * statementList) : void
+visit(ast::Term * term) : void
+visit(ast::Factor * factor) : void
+visit(ast::Expression * expression) : void
+visit(ast::SimpleExpression * simpleExpression) : void
+visit(ast::Statement * statement) : void
+visit(ast::CompoundStatement * compoundStatement) : void
+visit(ast::ExpressionList * expressionList) : void
+visit(ast::AST * AST) : void
+visit(ast::ValueParam * valueparam) : void
+visit(ast::ProgramBody * programbody) : void
+visit(ast::ParamLists * paramlists) : void
+visit(ast::SubprogramHead * subprogramhead) : void
+visit(ast::SubprogramDeclaration * subprogramdeclaration) : void
+visit(ast::PeriodsNode * periodsnode) : void
+visit(ast::VarDeclaration * vardeclaration) : void
+visit(ast::StringTypeNode * stringtypenode) : void
+visit(ast::RecordDeclaration * recorddeclaration) : void
+visit(ast::TypeNode * typenode) : void
+visit(ast::ConstDeclaration * constdeclaration) : void
+visit(ast::IdList * idlist) : void
+visit(ast::ProgramHead * programhead) : void
+visit(ast::LeafNode * leafnode) : void
+visit(ast::AstNode * astnode) : void
__
}
class "ast::SemanticVisitor" as C_0001774401635359720999
class C_0001774401635359720999 {
+visit(ast::VariableList * variableList) : void
+visit(ast::StatementList * statementList) : void
+visit(ast::Statement * statement) : void
+visit(ast::IfStatement * ifStatement) : void
+visit(ast::ElsePart * elseNode) : void
+visit(ast::ProcedureCall * procedureCall) : void
+visit(ast::AssignopStatement * assignopStatement) : void
+visit(ast::LoopStatement * loopStatement) : void
+visit(ast::Variable * variable) : void
+visit(ast::CompoundStatement * compoundStatement) : void
+visit(ast::IDVarPart * idVarPart) : void
+visit(ast::IDVarParts * idVarParts) : void
+visit(ast::ExpressionList * expressionList) : void
+visit(ast::Expression * expression) : void
+visit(ast::SimpleExpression * simpleExpression) : void
+visit(ast::Term * term) : void
+visit(ast::Factor * factor) : void
+visit(ast::AST * AST) : void
+visit(ast::ValueParam * valueparam) : void
+visit(ast::ParamLists * paramlists) : void
+visit(ast::SubprogramHead * subprogramhead) : void
+visit(ast::SubprogramDeclaration * subprogramdeclaration) : void
+visit(ast::PeriodsNode * periodsnode) : void
+visit(ast::VarDeclaration * vardeclaration) : void
+visit(ast::StringTypeNode * stringtypenode) : void
+visit(ast::TypeNode * typenode) : void
+visit(ast::RecordDeclaration * recorddeclaration) : void
+visit(ast::ConstDeclaration * constdeclaration) : void
+visit(ast::ProgramHead * programhead) : void
+visit(ast::ProgramBody * programbody) : void
+visit(ast::IdList * idlist) : void
+visit(ast::LeafNode * leafnode) : void
+visit(ast::AstNode * astnode) : void
__
}
class "ConstValue::(anonymous_1696859)" as C_0002004939550403483136
class C_0002004939550403483136 {
__
+C_BOOLEAN : bool
+C_CHAR : char
+C_INT : int
}
C_0001606454869580324163 --> C_0000522733582439809359 : +subSymbolTable
C_0000522733582439809359 --> C_0001606454869580324163 : +records
C_0001628368238549969542 --> C_0000522733582439809359 : +RecordTable
C_0000744774109044742354 ..> C_0000522733582439809359
C_0000744774109044742354 --> C_0001628368238549969542 : +records
C_0000529730883475053920 --+ C_0000467689350659102699
C_0000467689350659102699 <|-- C_0002185627330333745417
C_0001231730714740378156 --+ C_0002185627330333745417
C_0001959462666872035640 --> C_0000467689350659102699 : -base_type
C_0000467689350659102699 <|-- C_0001959462666872035640
C_0001209370767085130609 --+ C_0001959462666872035640
C_0000467689350659102699 <|-- C_0000587759221513231755
C_0002009989105775456144 --+ C_0000587759221513231755
C_0002120818701774332934 --> C_0000467689350659102699 : -types_map_
C_0000467689350659102699 <|-- C_0002120818701774332934
C_0000277815500992219614 o-- C_0001472540614063561858
C_0001345563472538168523 --+ C_0000277815500992219614
C_0000853086690362823776 ..> C_0001283217098970852251
C_0000853086690362823776 --> C_0000853086690362823776 : #pnode
C_0000853086690362823776 --> C_0000853086690362823776 : #cnode_list
C_0001755161922335472054 ..> C_0001283217098970852251
C_0001755161922335472054 --> C_0000853086690362823776 : -astroot
C_0001891718448820606885 ..> C_0001283217098970852251
C_0001891718448820606885 o-- C_0000277815500992219614 : -value_
C_0000853086690362823776 <|-- C_0001891718448820606885
C_0001169877962769338550 --+ C_0001891718448820606885
C_0000853086690362823776 <|-- C_0001403028613482180792
C_0001039261186312901148 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0001039261186312901148
C_0001290645563821860957 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0001290645563821860957
C_0000098405554555039683 ..> C_0001891718448820606885
C_0000098405554555039683 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0000098405554555039683
C_0000706003615359848754 --+ C_0000098405554555039683
C_0000853086690362823776 <|-- C_0001987874590769253296
C_0001627710199458724827 --+ C_0001987874590769253296
C_0000221952385668568331 ..> C_0001283217098970852251
C_0000221952385668568331 ..> C_0000277815500992219614
C_0000853086690362823776 <|-- C_0000221952385668568331
C_0001742231075481564967 --+ C_0000221952385668568331
C_0000853086690362823776 <|-- C_0001060606805983769539
C_0000526924719839086577 --+ C_0001060606805983769539
C_0001992204529206474452 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0001992204529206474452
C_0000537716566214296568 --+ C_0001992204529206474452
C_0000853086690362823776 <|-- C_0001646110349630654613
C_0002073936205624464460 --+ C_0001646110349630654613
C_0002078631727897486658 ..> C_0001283217098970852251
C_0002078631727897486658 ..> C_0001891718448820606885
C_0000853086690362823776 <|-- C_0002078631727897486658
C_0001435040438578498233 --+ C_0002078631727897486658
C_0000483287089190027689 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0000483287089190027689
C_0002269578869727028729 --+ C_0000483287089190027689
C_0001997126894964397376 --> C_0001959462666872035640 : -array_info
C_0000853086690362823776 <|-- C_0001997126894964397376
C_0000853086690362823776 <|-- C_0002292809248077293337
C_0000934375130850854631 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0000934375130850854631
C_0000314399243617261819 --+ C_0000934375130850854631
C_0000853086690362823776 <|-- C_0000377647302344045910
C_0001050890952326808511 ..> C_0001283217098970852251
C_0001050890952326808511 --> C_0000587759221513231755 : -string_info
C_0000853086690362823776 <|-- C_0001050890952326808511
C_0000853086690362823776 <|-- C_0002224500763270754929
C_0001412390065081918621 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0001412390065081918621
C_0000853086690362823776 <|-- C_0000909506194982526571
C_0000180422951222851979 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0000180422951222851979
C_0001887246330543974798 --+ C_0000180422951222851979
C_0000853086690362823776 <|-- C_0002226303723276435070
C_0000853086690362823776 <|-- C_0001572200999869269559
C_0001907021339308063340 --+ C_0001572200999869269559
C_0000179980853142767904 ..> C_0001283217098970852251
C_0000179980853142767904 ..> C_0001572200999869269559
C_0000853086690362823776 <|-- C_0000179980853142767904
C_0001798032292521186319 --+ C_0000179980853142767904
C_0000853086690362823776 <|-- C_0002154733648916226796
C_0001717198223397862655 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0001717198223397862655
C_0000794278244136857665 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0000794278244136857665
C_0002238353238070085767 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0002238353238070085767
C_0001334584314240978134 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0001334584314240978134
C_0001791804704116352889 --+ C_0001334584314240978134
C_0001335198107022880256 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0001335198107022880256
C_0002089249235439042912 --+ C_0001335198107022880256
C_0000260509290310579536 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0000260509290310579536
C_0000145534378423555184 --+ C_0000260509290310579536
C_0001010582041702535922 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0001010582041702535922
C_0002157851917444485651 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0002157851917444485651
C_0000277724883564452277 --+ C_0002157851917444485651
C_0001149455115564085369 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0001149455115564085369
C_0002123844210877963400 --+ C_0001149455115564085369
C_0000290295873667969561 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0000290295873667969561
C_0001686617686631478409 --+ C_0000290295873667969561
C_0001735198267942146977 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0001735198267942146977
C_0000935592460367641586 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0000935592460367641586
C_0001829671956067666425 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0001829671956067666425
C_0000676630859667726393 --+ C_0001829671956067666425
C_0000975878119249737592 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0000975878119249737592
C_0001766773012925556646 --+ C_0000975878119249737592
C_0000065058684392495055 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0000065058684392495055
C_0000161010635408081536 --+ C_0000065058684392495055
C_0000427656451535093468 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0000427656451535093468
C_0000423987124306390059 --+ C_0000427656451535093468
C_0001704243835344327889 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0001704243835344327889
C_0002260302037909013016 --+ C_0001704243835344327889
C_0002284675763545756674 ..> C_0001283217098970852251
C_0000853086690362823776 <|-- C_0002284675763545756674
C_0001310165613489391021 --+ C_0002284675763545756674
C_0001283217098970852251 ..> C_0000853086690362823776
C_0001283217098970852251 ..> C_0001755161922335472054
C_0001283217098970852251 ..> C_0001891718448820606885
C_0001283217098970852251 ..> C_0001039261186312901148
C_0001283217098970852251 ..> C_0001290645563821860957
C_0001283217098970852251 ..> C_0000098405554555039683
C_0001283217098970852251 ..> C_0000221952385668568331
C_0001283217098970852251 ..> C_0001992204529206474452
C_0001283217098970852251 ..> C_0000483287089190027689
C_0001283217098970852251 ..> C_0001050890952326808511
C_0001283217098970852251 ..> C_0002078631727897486658
C_0001283217098970852251 ..> C_0000934375130850854631
C_0001283217098970852251 ..> C_0001412390065081918621
C_0001283217098970852251 ..> C_0000180422951222851979
C_0001283217098970852251 ..> C_0000179980853142767904
C_0001283217098970852251 ..> C_0001717198223397862655
C_0001283217098970852251 ..> C_0002238353238070085767
C_0001283217098970852251 ..> C_0001010582041702535922
C_0001283217098970852251 ..> C_0001149455115564085369
C_0001283217098970852251 ..> C_0000260509290310579536
C_0001283217098970852251 ..> C_0001335198107022880256
C_0001283217098970852251 ..> C_0002157851917444485651
C_0001283217098970852251 ..> C_0001735198267942146977
C_0001283217098970852251 ..> C_0000290295873667969561
C_0001283217098970852251 ..> C_0001829671956067666425
C_0001283217098970852251 ..> C_0000935592460367641586
C_0001283217098970852251 ..> C_0001704243835344327889
C_0001283217098970852251 ..> C_0002284675763545756674
C_0001283217098970852251 ..> C_0000065058684392495055
C_0001283217098970852251 ..> C_0000427656451535093468
C_0001283217098970852251 ..> C_0001334584314240978134
C_0001283217098970852251 ..> C_0000794278244136857665
C_0001283217098970852251 ..> C_0000975878119249737592
C_0002082881558817170019 ..> C_0001755161922335472054
C_0002082881558817170019 ..> C_0000853086690362823776
C_0002082881558817170019 ..> C_0001891718448820606885
C_0002082881558817170019 ..> C_0001039261186312901148
C_0002082881558817170019 ..> C_0000098405554555039683
C_0002082881558817170019 ..> C_0000221952385668568331
C_0002082881558817170019 ..> C_0000483287089190027689
C_0002082881558817170019 ..> C_0001992204529206474452
C_0002082881558817170019 ..> C_0001050890952326808511
C_0002082881558817170019 ..> C_0002078631727897486658
C_0002082881558817170019 ..> C_0000934375130850854631
C_0002082881558817170019 ..> C_0001412390065081918621
C_0002082881558817170019 ..> C_0000180422951222851979
C_0002082881558817170019 ..> C_0000179980853142767904
C_0002082881558817170019 ..> C_0001290645563821860957
C_0002082881558817170019 ..> C_0001717198223397862655
C_0002082881558817170019 ..> C_0002238353238070085767
C_0002082881558817170019 ..> C_0001010582041702535922
C_0002082881558817170019 ..> C_0001149455115564085369
C_0002082881558817170019 ..> C_0000260509290310579536
C_0002082881558817170019 ..> C_0001335198107022880256
C_0002082881558817170019 ..> C_0002157851917444485651
C_0002082881558817170019 ..> C_0001735198267942146977
C_0002082881558817170019 ..> C_0000290295873667969561
C_0002082881558817170019 ..> C_0001829671956067666425
C_0002082881558817170019 ..> C_0000935592460367641586
C_0002082881558817170019 ..> C_0001704243835344327889
C_0002082881558817170019 ..> C_0002284675763545756674
C_0002082881558817170019 ..> C_0000065058684392495055
C_0002082881558817170019 ..> C_0000427656451535093468
C_0002082881558817170019 ..> C_0001334584314240978134
C_0002082881558817170019 ..> C_0000794278244136857665
C_0002082881558817170019 ..> C_0000975878119249737592
C_0001283217098970852251 <|-- C_0002082881558817170019
C_0001774401635359720999 ..> C_0001755161922335472054
C_0001774401635359720999 ..> C_0000853086690362823776
C_0001774401635359720999 ..> C_0001891718448820606885
C_0001774401635359720999 ..> C_0000098405554555039683
C_0001774401635359720999 ..> C_0001290645563821860957
C_0001774401635359720999 ..> C_0001039261186312901148
C_0001774401635359720999 ..> C_0000221952385668568331
C_0001774401635359720999 ..> C_0001992204529206474452
C_0001774401635359720999 ..> C_0000483287089190027689
C_0001774401635359720999 ..> C_0001050890952326808511
C_0001774401635359720999 ..> C_0002078631727897486658
C_0001774401635359720999 ..> C_0000934375130850854631
C_0001774401635359720999 ..> C_0001412390065081918621
C_0001774401635359720999 ..> C_0000180422951222851979
C_0001774401635359720999 ..> C_0000179980853142767904
C_0001774401635359720999 ..> C_0001717198223397862655
C_0001774401635359720999 ..> C_0000794278244136857665
C_0001774401635359720999 ..> C_0002238353238070085767
C_0001774401635359720999 ..> C_0001334584314240978134
C_0001774401635359720999 ..> C_0001010582041702535922
C_0001774401635359720999 ..> C_0001149455115564085369
C_0001774401635359720999 ..> C_0000260509290310579536
C_0001774401635359720999 ..> C_0001335198107022880256
C_0001774401635359720999 ..> C_0002157851917444485651
C_0001774401635359720999 ..> C_0001735198267942146977
C_0001774401635359720999 ..> C_0000290295873667969561
C_0001774401635359720999 ..> C_0001829671956067666425
C_0001774401635359720999 ..> C_0000935592460367641586
C_0001774401635359720999 ..> C_0000975878119249737592
C_0001774401635359720999 ..> C_0000065058684392495055
C_0001774401635359720999 ..> C_0000427656451535093468
C_0001774401635359720999 ..> C_0001704243835344327889
C_0001774401635359720999 ..> C_0002284675763545756674
C_0001283217098970852251 <|-- C_0001774401635359720999

'Generated with clang-uml, version 0.5.2
'LLVM version Ubuntu clang version 15.0.7
@enduml
